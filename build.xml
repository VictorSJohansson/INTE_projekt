<project name="TestFramework" default="compile" basedir=".">
	<description>
		Projekt INTE HT2015
	</description>

	<!-- Tests is used by junit to print report -->
	<property name="tests" location="junit-tests" />

	<!-- Lib is where junit jarfiles are stored -->
	<property name="lib" location="lib" />

	<!-- src is where the java package is located -->
	<property name="src" location="src" />

	<!-- compile is where javac will put the compiled version -->
	<property name="compile" location="bin" />

	<!-- dist is where distribution will be created -->
	<property name="dist" location="dist" />

	<!-- Used William Brendel's suggested solution to create the solution below: 
	http://stackoverflow.com/questions/722774/getting-ant-javac-to-recognise-a-classpath 
	Combined the solution with Oers suggested solution:
	http://stackoverflow.com/questions/12745465/ant-junit-classnotfoundexception -->
	<path id="junit-classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement path="${compile}" />
	</path>

	<target name="init" depends="clean-compile" description="Makes a timestamp and creates the ${compile} directory">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the ${compile} directory -->
		<mkdir dir="${compile}" />
	</target>

	<target name="compile" depends="init" description="compile the source code">
		<!-- Compile the java code from ${src} into ${compile} -->

		<javac includeantruntime="false" destdir="${compile}" debug="true">
			<src path="${src}" />
			<classpath refid="junit-classpath" />
		</javac>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}/lib" />

		<!-- Put everything in ${compile} into the TestFramework-${tstamp}.jar file -->
		<jar jarfile="${dist}/lib/TestFramework-${DSTAMP}.jar" basedir="${compile}" />
	</target>

	<!-- Run junit tests -->
	<target name="junit" depends="compile" description="Run all our junit tests">
		<junit printsummary="yes" haltonfailure="no">
			<classpath refid="junit-classpath" />

			<formatter type="plain" usefile="false" />
			<formatter type="plain" />

			<batchtest fork="yes" todir="${tests}">
				<fileset dir="${src}">
					<include name="**/*Junit*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="clean-dist" description="clean up ${dist}">
		<!-- Delete the ${dist} directory trees -->
		<delete dir="${dist}" />
	</target>

	<target name="clean-tests" description="clean up ${tests}">
		<!-- Delete the ${tests} directory trees -->
		<delete dir="${tests}" />
	</target>

	<target name="clean-compile" description="clean up ${compile}">
		<!-- Delete the ${compile} directory trees -->
		<delete dir="${compile}" />
	</target>

	<target name="clean-all" depends="clean-compile, clean-dist, clean-tests" description="clean up all">
		<!-- Delete the ${compile}, ${dist} and ${tests} directory trees -->
	</target>

</project>
